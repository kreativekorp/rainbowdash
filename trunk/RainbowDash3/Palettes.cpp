#include "Palettes.h"
#include <avr/pgmspace.h>

unsigned int palette_info[32][2] PROGMEM = {
	{ 0,    8   }, /* OCTAL_RGB */
	{ 8,    8   }, /* OCTAL_RBG */
	{ 16,   8   }, /* OCTAL_GRB */
	{ 24,   8   }, /* OCTAL_GBR */
	{ 32,   8   }, /* OCTAL_BRG */
	{ 40,   8   }, /* OCTAL_BGR */
	{ 48,   8   }, /* OCTAL_QUICKDRAW */
	{ 56,   8   }, /* OCTAL_IMAGEWRITER */
	{ 64,   8   }, /* OCTAL_RAINBOW_0 */
	{ 72,   8   }, /* OCTAL_RAINBOW_1 */
	{ 80,   8   }, /* OCTAL_RAINBOW_2 */
	{ 88,   10  }, /* DECIMAL_RAINBOW_0 */
	{ 98,   10  }, /* DECIMAL_RAINBOW_1 */
	{ 108,  10  }, /* DECIMAL_RYCV */
	{ 118,  12  }, /* DODECIMAL_RAINBOW_0 */
	{ 130,  12  }, /* DODECIMAL_RAINBOW_1 */
	{ 142,  16  }, /* HEX_CGA */
	{ 158,  16  }, /* HEX_CHEAP_CGA */
	{ 174,  16  }, /* HEX_SABINE */
	{ 190,  16  }, /* HEX_TOS */
	{ 206,  16  }, /* HEX_WINDOWS */
	{ 222,  16  }, /* HEX_MACINTOSH */
	{ 238,  16  }, /* HEX_RAINBOW_0 */
	{ 254,  16  }, /* HEX_RAINBOW_1 */
	{ 270,  20  }, /* VIGESIMAL_RAINBOW */
	{ 290,  24  }, /* RAINBOW_24 */
	{ 314,  32  }, /* RAINBOW_32 */
	{ 346,  36  }, /* RAINBOW_36 */
	{ 382,  7   }, /* RYCV_DAY */
	{ 389,  13  }, /* RYCV_MONTH */
	{ 402,  26  }, /* RYCV_LETTER */
	{ 428,  37  }, /* RYCV_TEST */
};

unsigned char palette_data[3][465] PROGMEM = {
	/* RED */ {
		/* OCTAL_RGB */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* OCTAL_RBG */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* OCTAL_GRB */
		0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
		/* OCTAL_GBR */
		0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		/* OCTAL_BRG */
		0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
		/* OCTAL_BGR */
		0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		/* OCTAL_QUICKDRAW */
		0xFF, 0xFB, 0xF2, 0xDD, 0x02, 0x00, 0x00, 0x00,
		/* OCTAL_IMAGEWRITER */
		0xFF, 0xFB, 0xDD, 0xFF, 0x00, 0x00, 0x80, 0x00,
		/* OCTAL_RAINBOW_0 */
		0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF,
		/* OCTAL_RAINBOW_1 */
		0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x80, 0xFF,
		/* OCTAL_RAINBOW_2 */
		0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xFF,
		/* DECIMAL_RAINBOW_0 */
		0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80,
		0xFF, 0xFF,
		/* DECIMAL_RAINBOW_1 */
		0x00, 0x99, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x80,
		0x80, 0xFF,
		/* DECIMAL_RYCV */
		0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
		0xFF, 0xFF,
		/* DODECIMAL_RAINBOW_0 */
		0x00, 0x99, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x80, 0xFF, 0x80, 0xFF,
		/* DODECIMAL_RAINBOW_1 */
		0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x80, 0xFF, 0xFF,
		/* HEX_CGA */
		0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA,
		0x55, 0x55, 0x55, 0x55, 0xFF, 0xFF, 0xFF, 0xFF,
		/* HEX_CHEAP_CGA */
		0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA,
		0x55, 0x55, 0x55, 0x55, 0xFF, 0xFF, 0xFF, 0xFF,
		/* HEX_SABINE */
		0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xAA,
		0x55, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* HEX_TOS */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xCC, 0xCC, 0xCC,
		0x55, 0x00, 0x33, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* HEX_WINDOWS */
		0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xC0,
		0x80, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		/* HEX_MACINTOSH */
		0xFF, 0xFB, 0xFF, 0xDD, 0xF2, 0x47, 0x00, 0x02,
		0x1F, 0x00, 0x56, 0x90, 0xC0, 0x80, 0x40, 0x00,
		/* HEX_RAINBOW_0 */
		0x00, 0x99, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x80, 0xFF,
		/* HEX_RAINBOW_1 */
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x40, 0x80, 0xC0, 0xFF, 0xFF,
		/* VIGESIMAL_RAINBOW */
		0x00, 0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0xC0,
		0xFF, 0xFF, 0x80, 0xFF,
		/* RAINBOW_24 */
		0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0xC0, 0xFF,
		0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xFF,
		0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x40, 0x80,
		/* RAINBOW_32 */
		0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0xC0, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x40, 0x80, 0xC0, 0xFF, 0xFF,
		0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x40, 0x80,
		/* RAINBOW_36 */
		0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x40,
		0x80, 0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0xC0,
		0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0x80, 0x80,
		0x80, 0xC0, 0xFF, 0xFF,
		/* RYCV_DAY */
		0xFF, 0xFF, 0x00, 0xFF, 0x99, 0x80, 0xFF,
		/* RYCV_MONTH */
		0xFF, 0x80, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
		0xFF, 0xFF, 0x99, 0xFF, 0x00,
		/* RYCV_LETTER */
		0x00, 0xFF, 0xFF, 0x00, 0x80, 0x80, 0xFF, 0xFF,
		0xFF, 0xFF, 0xC0, 0x00, 0x99, 0x00, 0xFF, 0xFF,
		0x80, 0xFF, 0xFF, 0x00, 0xFF, 0x99, 0xFF, 0xFF,
		0xFF, 0x80,
		/* RYCV_TEST */
		0x00, 0x80, 0xFF, 0xFF, 0x99, 0xFF, 0xFF, 0xFF,
		0x80, 0x80, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x80, 0xC0, 0xFF, 0xFF, 0x80, 0x80, 0x80,
		0x00, 0x00, 0x00, 0x40, 0x80,
	},
	/* GREEN */ {
		/* OCTAL_RGB */
		0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
		/* OCTAL_RBG */
		0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		/* OCTAL_GRB */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* OCTAL_GBR */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* OCTAL_BRG */
		0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		/* OCTAL_BGR */
		0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
		/* OCTAL_QUICKDRAW */
		0xFF, 0xF3, 0x08, 0x09, 0xAB, 0x80, 0x00, 0x00,
		/* OCTAL_IMAGEWRITER */
		0xFF, 0xF3, 0x09, 0x64, 0x00, 0x9F, 0x00, 0x00,
		/* OCTAL_RAINBOW_0 */
		0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF,
		/* OCTAL_RAINBOW_1 */
		0x00, 0x00, 0x80, 0xFF, 0xFF, 0x00, 0x00, 0xFF,
		/* OCTAL_RAINBOW_2 */
		0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		/* DECIMAL_RAINBOW_0 */
		0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0x00, 0xFF,
		/* DECIMAL_RAINBOW_1 */
		0x00, 0x66, 0x00, 0x80, 0xFF, 0xFF, 0x00, 0x00,
		0x80, 0xFF,
		/* DECIMAL_RYCV */
		0x80, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x80, 0x00,
		0x40, 0xFF,
		/* DODECIMAL_RAINBOW_0 */
		0x00, 0x66, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x00,
		0x00, 0x00, 0x80, 0xFF,
		/* DODECIMAL_RAINBOW_1 */
		0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
		0x00, 0x00, 0x00, 0x00,
		/* HEX_CGA */
		0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x55, 0xAA,
		0x55, 0x55, 0xFF, 0xFF, 0x55, 0x55, 0xFF, 0xFF,
		/* HEX_CHEAP_CGA */
		0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA,
		0x55, 0x55, 0xFF, 0xFF, 0x55, 0x55, 0xFF, 0xFF,
		/* HEX_SABINE */
		0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0xAA,
		0x55, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
		/* HEX_TOS */
		0x00, 0x00, 0xCC, 0xCC, 0x00, 0x00, 0x99, 0xCC,
		0x55, 0x66, 0xFF, 0xCC, 0x00, 0x66, 0xFF, 0xFF,
		/* HEX_WINDOWS */
		0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0xC0,
		0x80, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
		/* HEX_MACINTOSH */
		0xFF, 0xF3, 0x64, 0x09, 0x08, 0x00, 0x00, 0xAB,
		0xB7, 0x64, 0x2C, 0x71, 0xC0, 0x80, 0x40, 0x00,
		/* HEX_RAINBOW_0 */
		0x00, 0x66, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF,
		/* HEX_RAINBOW_1 */
		0x00, 0x40, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		/* VIGESIMAL_RAINBOW */
		0x00, 0x66, 0x00, 0x40, 0x80, 0xC0, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x80, 0xFF,
		/* RAINBOW_24 */
		0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80,
		0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x00, 0x40, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
		/* RAINBOW_32 */
		0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80,
		0x00, 0x40, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x40, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
		/* RAINBOW_36 */
		0x00, 0x00, 0x40, 0x80, 0x80, 0x80, 0x00, 0x00,
		0x00, 0x66, 0x00, 0x40, 0x80, 0xC0, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x80, 0x80, 0xC0, 0xFF, 0xFF, 0xFF,
		0x80, 0x80, 0x80, 0xFF,
		/* RYCV_DAY */
		0x80, 0x00, 0x00, 0xFF, 0x66, 0x00, 0xFF,
		/* RYCV_MONTH */
		0x00, 0x00, 0xFF, 0xFF, 0x00, 0xC0, 0x00, 0x80,
		0xFF, 0xFF, 0x66, 0x00, 0xFF,
		/* RYCV_LETTER */
		0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x80, 0xFF,
		0xFF, 0x00, 0x00, 0x00, 0x66, 0x00, 0xFF, 0x00,
		0x80, 0x00, 0xEE, 0x00, 0x80, 0x66, 0xFF, 0xC0,
		0xFF, 0x80,
		/* RYCV_TEST */
		0x00, 0x80, 0xFF, 0xEE, 0x66, 0x80, 0xC0, 0xFF,
		0xFF, 0xFF, 0x80, 0x80, 0x80, 0x00, 0x40, 0x80,
		0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80,
		0x80, 0x80, 0x00, 0x00, 0x00,
	},
	/* BLUE */ {
		/* OCTAL_RGB */
		0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		/* OCTAL_RBG */
		0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
		/* OCTAL_GRB */
		0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		/* OCTAL_GBR */
		0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
		/* OCTAL_BRG */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* OCTAL_BGR */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* OCTAL_QUICKDRAW */
		0xFF, 0x05, 0x84, 0x07, 0xEA, 0x12, 0xD3, 0x00,
		/* OCTAL_IMAGEWRITER */
		0xFF, 0x05, 0x07, 0x03, 0xD3, 0x00, 0xFF, 0x00,
		/* OCTAL_RAINBOW_0 */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* OCTAL_RAINBOW_1 */
		0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
		/* OCTAL_RAINBOW_2 */
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* DECIMAL_RAINBOW_0 */
		0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF,
		/* DECIMAL_RAINBOW_1 */
		0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
		0x80, 0xFF,
		/* DECIMAL_RYCV */
		0x80, 0x00, 0xFF, 0x00, 0x00, 0x80, 0x00, 0xFF,
		0x00, 0xFF,
		/* DODECIMAL_RAINBOW_0 */
		0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
		0xFF, 0xFF, 0x80, 0xFF,
		/* DODECIMAL_RAINBOW_1 */
		0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0x80,
		/* HEX_CGA */
		0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA,
		0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFF,
		/* HEX_CHEAP_CGA */
		0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA,
		0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFF,
		/* HEX_SABINE */
		0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xAA,
		0x55, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		/* HEX_TOS */
		0x00, 0xFF, 0x00, 0xCC, 0x00, 0xFF, 0x00, 0xCC,
		0x55, 0xFF, 0x33, 0xFF, 0x99, 0xFF, 0x33, 0xFF,
		/* HEX_WINDOWS */
		0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xC0,
		0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		/* HEX_MACINTOSH */
		0xFF, 0x05, 0x03, 0x07, 0x84, 0xA5, 0xD3, 0xEA,
		0x14, 0x12, 0x05, 0x3A, 0xC0, 0x80, 0x40, 0x00,
		/* HEX_RAINBOW_0 */
		0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x80, 0xFF,
		/* HEX_RAINBOW_1 */
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
		/* VIGESIMAL_RAINBOW */
		0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0x80, 0x80, 0xFF,
		/* RAINBOW_24 */
		0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80,
		/* RAINBOW_32 */
		0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80,
		/* RAINBOW_36 */
		0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
		0x80, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		/* RYCV_DAY */
		0x00, 0x00, 0xFF, 0xFF, 0x33, 0xFF, 0x00,
		/* RYCV_MONTH */
		0x00, 0xFF, 0x80, 0x00, 0x80, 0x80, 0xFF, 0x00,
		0xFF, 0x00, 0x33, 0x00, 0x00,
		/* RYCV_LETTER */
		0x00, 0x80, 0x80, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
		0xFF, 0x00, 0xFF, 0x00, 0x33, 0xFF, 0x00, 0xFF,
		0x80, 0x00, 0xCC, 0x00, 0x00, 0x33, 0xFF, 0x80,
		0x00, 0x80,
		/* RYCV_TEST */
		0x00, 0x80, 0xFF, 0xCC, 0x33, 0x80, 0x80, 0x80,
		0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00,
		0x00, 0x80, 0x80, 0x80, 0x80,
	},
};

unsigned char get_palette_color(unsigned char palette, unsigned char channel, unsigned long value) {
	unsigned int offset = pgm_read_word(&(palette_info[palette % 32][0]));
	unsigned int length = pgm_read_word(&(palette_info[palette % 32][1]));
	return pgm_read_byte(&(palette_data[channel % 3][offset + (value % length)]));
};
